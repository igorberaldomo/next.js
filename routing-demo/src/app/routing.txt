conveções para routing:
1º todas as rotas devem estar no folder 'app' dentro do folder 'src'
2º todo arquivo que corresponde a uma rota deve ser nomeado 'page.js' ou 'page.tsx'
3º cada folder corresponde a um segmento de caminho no browser
4º next.js automaticamente responde com codigo 404 quando uma pagina não é encontrada

metodo 1: caminhos pré-determinados
para criar uma navegação entre paginas no next.js você simplismente cria novas pastas dentro das pastas disponíveis, nesse exemplo temos duas paginas filhas da parte blog chamadas de 'first' e 'second' 

metodo 2: rotas dinamicas 
quando criado uma pasta com [nomedapasta] next.js entende que o segmento é dinamicos permitindo a construção de rotas dinamicas. isso é util para reutilizar a mesma pagina, por exemplo, para mostrar informações de produtos

metodo 3: rotas dinamicas com caminhos prédeterminados
quando você tem que colocar caminhos dinamicos dentro de caminhos dinamicos por exemplo: você tem um produto 1, e esse produto tem 3 reviews que você quer ver o caminho usado para chegar até essa informação é pagina produtos, você seleciona o produto que vai acinar uma rota dinamica para mostrar as informações pelo [productId], finalmente você clica na página reviews que vai pegar somente a review selecionada pelo [reviewId] sendo assim a url do site vai ficar 'www.nomedosite.com/products/[productId]/reviews/[reviewId]' 

metodo 4: definir todos os segmentos da url em um unico arquivo
dentro da pasta 'app' cria uma pasta chamada 'docs' esse folder é especial no next.js, dentro da pasta 'docs' crie uma nova pasta '[...slug]', slug é a palavra de convenção que se refere a URLs, dentro da pasta '[...slug]' crie um page.tsx.
O que torna esse arquivo especial é que qualquer url que conter '/docs' vai automaticamente para mesma pagina, por exemplo 'http://localhost:3000/docs/feature1' e 'http://localhost:3000/docs/feature1/concept1' vão parar na mesma pagina, dentro do arquivo você vai fazer uma cadeia de if medindo o tamanho de slug e o que está sendo pedido para determinar que pagina será carregada
atenção para que seja lida a pagina 'home/docs/' você tem que renomear [..slug] para [[..slug]] e passar 'params.slug' para opcional colocando ? entre slug e .lenght ficando assim 'params.slug?.lenght' na hora de determinar que pagina vai ser lida

metodo 5: criando uma pagina para erro 404 customizada:
para criar uma pagina para erro 404, na pasta 'app' crie um documento chamado 'not-found.jsx' ou 'not-found.jx' para substituir a pagina 404 padrão esse nome é reservado 
você tambem pode aplicar paginas de not found condicionais, nesse caso na pagina page.tsx dentro de [reviewsId] tem um limite de 1000 reviews por documento alem disso uma pagina customizada 'not-found.jsx' falando que o review procurado não foi encontrado

next.js usa um sistema de folders em que cada folder representa um ou mais endereços de url, porem nem todos os folders agem dessa forma. temos um folder chamado dashboard com um arquivo chamado 'line-chart.jsx', se tentarmos acessa-lo pelo localhost:3000/dashboard ele vai mostrar a pagina de erro 404, pois dashboard não vai ser acessável enquanto não tiver um arquivo 'page.jsx' com pelo menos componente React exportado com 'export default componente', se tiver outras funções dentro da pagina sem serem exportadas elas não vão renderizar

metodos 6: pasta privada
para criar uma pasta privada inicie a pasta com '_', exemplo '_lib' é uma pasta cuja a conveção tráz as suas utilidades

metodo 7: route groups
para transformar a pasta em um route groups, você deve envolver o nome da pasta em parênteses, no nosso exemplo a pasta 'auth' ficaria '(auth)' isso ira sinalizar para o next.js que o nome da pasta será omitido na url

metodo 8: criando layouts
você cria um layout quando você export default um componente React de um arquivo layout.tsx ou layout.js, esse componente deve aceitar props children que vai ser populado durante a renderização, o layout generico fica na pasta 'app'

você também pode criar layouts específicos criando um arquivo layout.tsx em outra pasta que possa ser vista pelo next.js, nesse caso vamos colocar o layout somente para [reviewId] http://localhost:3000/products/200/reviews/1

você também pode fazer layouts para route groups